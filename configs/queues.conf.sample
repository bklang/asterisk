[general]
;
; Global settings for call queues
;   (none exist currently)
;
; Note that a timeout to fail out of a queue may be passed as part of application call
; from extensions.conf:
; Queue(queuename|[options]|[optionalurl]|[announceoverride]|[timeout])
; example: Queue(dave|t|||45)

[default]
;
; Default settings for queues (currently unused)
;

;[markq]
;
; A sample call queue
;
; Music sets which musiconhold applies for this particular
; call queue
;
;music = default
;
; An announcement may be specified which is played for the member as
; soon as they answer a call, typically to indicate to them which queue
; this call should be answered as, so that agents or members who are
; listening to more than one queue can differentiated how they should
; engage the customer
;
;announce = queue-markq
;
; A strategy may be specified.  Valid strategies include:
;
; ringall - ring all available channels until one answers (default)
; roundrobin - take turns ringing each available interface 
; leastrecent - ring interface which was least recently called by this queue
; fewestcalls - ring the one with fewest completed calls from this queue
; random - ring random interface
; rrmemory - round robin with memory, remember where we left off last ring pass
;
;strategy = ringall
;
; A context may be specified, in which if the user types a SINGLE
; digit extension while they are in the queue, they will be taken out
; of the queue and sent to that extension in this context.
;
;context = qoutcon
;
; How long do we let the phone ring before we consider this a timeout...
;
;timeout = 15
;
; How long do we wait before trying all the members again?
;
;retry = 5
;
; After a successful call, how long to wait before sending a potentially
; free member another call (default is 0, or no delay)
;
;wrapuptime=15
;
; Maximum number of people waiting in the queue (0 for unlimited)
;
;maxlen = 0
;
;
; How often to announce queue position and/or estimated holdtime to caller (0=off)
;
;announce-frequency = 90 
;
; Should we include estimated hold time in position announcements?
; Either yes, no, or only once.
; Hold time will be announced as the estimated time, 
; or "less than 2 minutes" when appropriate.
;
;announce-holdtime = yes|no|once

;
; What's the rounding time for the seconds?
; If this is non zero then we announce the seconds as well as the minutes rounded to this value
;
; announce-round-seconds = 10
;
; Use these sound files in making position/holdtime announcements.  The
; defaults are as listed below -- change only if you need to.
;
;queue-youarenext = queue-youarenext		;	("You are now first in line.")
;queue-thereare	= queue-thereare		;	("There are")
;queue-callswaiting = queue-callswaiting	;	("calls waiting.")
;queue-holdtime = queue-holdtime		;	("The current est. holdtime is")
;queue-minutes = queue-minutes			;	("minutes.")
;queue-seconds = queue-seconds			;	("seconds.")
;queue-thankyou = queue-thankyou		;	("Thank you for your patience.")
;
; Calls may be recorded using Asterisk's monitor resource
; This can be enabled from within the Queue application, starting recording
; when the call is actually picked up; thus, only successful calls are
; recorded, and you are not recording while people are listening to MOH.
; To enable monitoring, simply specify "monitor-format";  it will be disabled
; otherwise.
;
; You can specify the monitor filename with by calling SetVar(MONITOR_FILENAME=foo)
; Otherwise it will use ${UNIQUEID}
;
; monitor-format = gsm|wav|wav49
;
; If you wish to have the two files joined together when the call ends set this to yes
;
; monitor-join = yes
;
; If you wish to allow queues that have no members currently to be joined, set this to yes
;
; joinempty = yes
;
; Asterisk can generate AgentCalled events when an agent is rung, if this is turned on
; (may generate a LOT of extra manager events)
;
; eventwhencalled = yes
;
; Each member of this call queue is listed on a separate line in
; the form technology/dialstring.  "member" means a normal member of a
; queue.  An optional penalty may be specified after a comma, such that
; entries with higher penalties are considered last.
;
;member => Zap/1
;member => Zap/2
;member => Agent/1001
;member => Agent/1002

;member => Agent/@1		; Any agent in group 1
;member => Agent/:1,1		; Any agent in group 1, wait for first
                                ; available, but consider with penalty

