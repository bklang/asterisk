#
# Asterisk -- A telephony toolkit for Linux.
# 
# Makefile rules for subdirectories containing modules
#
# Copyright (C) 2006, Digium, Inc.
#
# Kevin P. Fleming <kpfleming@digium.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License
#

# Makefile rules for building modules.

# In most cases, we set target-specific variables for certain targets
# (remember that they apply recursively to prerequisites).
# Also note that we can only set one variable per rule, so we have to
# repeat the left hand side to set multiple variables.

ifneq ($(findstring MALLOC_DEBUG,$(MENUSELECT_CFLAGS)),)
 ifeq ($(findstring astmm.h,$(ASTCFLAGS)),)
  ASTCFLAGS+=-include $(ASTTOPDIR)/include/asterisk/astmm.h
 endif
endif

ifeq ($(findstring LOADABLE_MODULES,$(MENUSELECT_CFLAGS)),)
  ASTCFLAGS+=${GC_CFLAGS}
endif

ifneq ($(findstring STATIC_BUILD,$(MENUSELECT_CFLAGS)),)
  STATIC_BUILD=-static
endif

include $(ASTTOPDIR)/Makefile.rules

comma:=,

# Both C++ and C++ sources need their module name in AST_MODULE
# We also pass whatever _INCLUDE list is generated by menuselect
# (they are stored in file 'makeopts')

$(addsuffix .oo,$(CC_MODS)) $(addsuffix .o,$(C_MODS)):	\
	ASTCFLAGS+= -DAST_MODULE=\"$*\" $(MENUSELECT_OPTS_$*:%=-D%) $(foreach dep,$(MENUSELECT_DEPENDS_$*),$(value $(dep)_INCLUDE))

# For loadable modules, pass _LIB and _LDFLAGS from menuselect.
$(LOADABLE_MODS:%=%.so): ASTCFLAGS+=-fPIC
$(LOADABLE_MODS:%=%.so): LIBS+=$(foreach dep,$(MENUSELECT_DEPENDS_$*),$(value $(dep)_LIB))
$(LOADABLE_MODS:%=%.so): ASTLDFLAGS+=$(foreach dep,$(MENUSELECT_DEPENDS_$*),$(value $(dep)_LDFLAGS))

$(EMBEDDED_MODS:%=%.o): ASTCFLAGS+=-DEMBEDDED_MODULE=$*

$(addsuffix .so,$(filter $(LOADABLE_MODS),$(C_MODS))): %.so: %.o
$(addsuffix .so,$(filter $(LOADABLE_MODS),$(CC_MODS))): %.so: %.oo

modules.link: $(addsuffix .eo,$(filter $(EMBEDDED_MODS),$(C_MODS)))
modules.link: $(addsuffix .eoo,$(filter $(EMBEDDED_MODS),$(CC_MODS)))

.PHONY: clean uninstall _all

ifneq ($(LOADABLE_MODS),)
_all: $(LOADABLE_MODS:%=%.so)
endif

ifneq ($(EMBEDDED_MODS),)
_all: modules.link
__embed_ldscript:
	@echo "../$(SUBDIR)/modules.link"
__embed_ldflags:
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(C_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LDFLAGS))"
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(CC_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LDFLAGS))"
__embed_libs:
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(C_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LIB))"
	@echo "$(foreach mod,$(filter $(EMBEDDED_MODS),$(CC_MODS)),$(foreach dep,$(MENUSELECT_DEPENDS_$(mod)),$(dep)_LIB))"
else
__embed_ldscript:
__embed_ldflags:
__embed_libs:
endif

modules.link:
	@rm -f $@
	@for file in $(patsubst %,$(SUBDIR)/%,$(filter %.eo %.eoo,$^)); do echo "INPUT (../$${file})" >> $@; done
	@for file in $(patsubst %,$(SUBDIR)/%,$(filter-out %.eo %.eoo,$^)); do echo "INPUT (../$${file})" >> $@; done

clean::
	rm -f *.so *.o *.oo *.eo *.eoo
	rm -f .*.o.d .*.oo.d
	rm -f *.s *.i
	rm -f modules.link

install:: all
	for x in $(LOADABLE_MODS:%=%.so); do $(INSTALL) -m 755 $$x $(DESTDIR)$(MODULES_DIR) ; done

uninstall::

ifneq ($(wildcard .*.d),)
   include .*.d
endif
